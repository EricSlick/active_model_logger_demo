<div class="container">
  <h1>ActiveModelLogger Demo</h1>
  <p class="lead">This demo shows how to use the ActiveModelLogger gem in a Rails application.</p>

  <div class="row mb-4">
    <div class="col-md-8">
      <div class="card">
        <div class="card-header">
          <h5>Enhanced Demo Actions</h5>
        </div>
        <div class="card-body">
          <div class="row">
            <div class="col-md-6 mb-2">
              <%= form_with url: create_demo_path, method: :post, local: true do |form| %>
                <%= form.submit "Create Basic Demo", class: "btn btn-primary w-100" %>
              <% end %>
              <small class="text-muted">Basic logging features</small>
            </div>
            <div class="col-md-6 mb-2">
              <%= form_with url: create_session_demo_path, method: :post, local: true do |form| %>
                <%= form.submit "Session Workflow Demo", class: "btn btn-info w-100" %>
              <% end %>
              <small class="text-muted">Log chain management & session tracking</small>
            </div>
            <div class="col-md-6 mb-2">
              <%= form_with url: create_batch_demo_path, method: :post, local: true do |form| %>
                <%= form.submit "Batch Logging Demo", class: "btn btn-success w-100" %>
              <% end %>
              <small class="text-muted">Performance-optimized batch operations</small>
            </div>
            <div class="col-md-6 mb-2">
              <%= form_with url: create_cleanup_demo_path, method: :post, local: true do |form| %>
                <%= form.submit "Cleanup Demo", class: "btn btn-warning w-100" %>
              <% end %>
              <small class="text-muted">Log cleanup & maintenance features</small>
            </div>
            <div class="col-md-6 mb-2">
              <%= form_with url: create_block_demo_path, method: :post, local: true do |form| %>
                <%= form.submit "Block Logging Demo", class: "btn btn-dark w-100" %>
              <% end %>
              <small class="text-muted">Block logging with automatic start/end</small>
            </div>
            <div class="col-md-6 mb-2">
              <%= form_with url: create_nested_keys_demo_path, method: :post, local: true do |form| %>
                <%= form.submit "Nested Keys Demo", class: "btn btn-purple w-100" %>
              <% end %>
              <small class="text-muted">Enhanced with_keys scope with nested searching</small>
            </div>
            <div class="col-md-6 mb-2">
              <%= form_with url: create_log_chain_demo_path, method: :post, local: true do |form| %>
                <%= form.submit "Create Log Chain Demo", class: "btn btn-success w-100" %>
              <% end %>
              <small class="text-muted">Creates demo data and shows grouped log chains</small>
            </div>
            <div class="col-md-6 mb-2">
              <%= link_to "View Log Chains", log_chain_demo_path, class: "btn btn-outline-success w-100" %>
              <small class="text-muted">View existing log chains in grouped format</small>
            </div>
            <div class="col-md-6 mb-2">
              <%= form_with url: create_job_workflow_demo_path, method: :post, local: true do |form| %>
                <%= form.submit "Multi-Job Workflow Demo", class: "btn btn-info w-100" %>
              <% end %>
              <small class="text-muted">Demonstrate logging across multiple background jobs</small>
            </div>
            <div class="col-md-6 mb-2">
              <%= link_to "View Jobs Dashboard", "/jobs", class: "btn btn-warning w-100", target: "_blank" %>
              <small class="text-muted">Monitor running jobs with Mission Control</small>
            </div>
          </div>
          <hr>
          <div class="row">
            <div class="col-md-4">
              <%= form_with url: clear_logs_path, method: :delete, local: true do |form| %>
                <%= form.submit "Clear All Logs", class: "btn btn-danger w-100",
                    confirm: "mission_control-jobsAre you sure you want to clear all logs?" %>
              <% end %>
            </div>
            <div class="col-md-4">
              <%= form_with url: clear_users_path, method: :delete, local: true do |form| %>
                <%= form.submit "Clear All Users", class: "btn btn-warning w-100",
                    confirm: "Are you sure you want to clear all users and their logs?" %>
              <% end %>
            </div>
            <div class="col-md-4">
              <%= form_with url: clear_orders_path, method: :delete, local: true do |form| %>
                <%= form.submit "Clear All Orders", class: "btn btn-warning w-100",
                    confirm: "Are you sure you want to clear all orders and their logs?" %>
              <% end %>
            </div>
          </div>
          <div class="row mt-2">
            <div class="col-md-6">
              <%= form_with url: create_test_logs_for_cleanup_path, method: :post, local: true do |form| %>
                <%= form.submit "Create Test Logs (3 Weeks)", class: "btn btn-info w-100" %>
              <% end %>
              <small class="text-muted">30 logs spanning previous 3 weeks</small>
            </div>
            <div class="col-md-6">
              <%= form_with url: cleanup_old_logs_path, method: :delete, local: true do |form| %>
                <%= form.submit "Cleanup Old Logs", class: "btn btn-secondary w-100",
                    confirm: "Clean up logs older than 7 days?" %>
              <% end %>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="col-md-4">
      <div class="card">
        <div class="card-header">
          <h5>Statistics</h5>
        </div>
        <div class="card-body">
          <p><strong>Users:</strong> <%= @users.count %></p>
          <p><strong>Orders:</strong> <%= @orders.count %></p>
          <p><strong>Total Logs:</strong> <%= ActiveModelLogger::Log.count %></p>
          <p><strong>Showing:</strong> <%= @logs.count %> of <%= ActiveModelLogger::Log.count %></p>
          <hr>
          <p><strong>Error Logs:</strong> <%= ActiveModelLogger::Log.where("JSON_EXTRACT(metadata, '$.log_level') = ?", 'error').count %></p>
          <p><strong>Info Logs:</strong> <%= ActiveModelLogger::Log.where("JSON_EXTRACT(metadata, '$.log_level') = ?", 'info').count %></p>
          <p><strong>Debug Logs:</strong> <%= ActiveModelLogger::Log.where("JSON_EXTRACT(metadata, '$.log_level') = ?", 'debug').count %></p>
          <hr>
          <p><strong>Logs with 'email' key:</strong> <%= ActiveModelLogger::Log.with_keys("email").count %></p>
          <p><strong>Logs with 'enabled' key:</strong> <%= ActiveModelLogger::Log.with_keys("enabled").count %></p>
          <p><strong>Logs with 'status' key:</strong> <%= ActiveModelLogger::Log.with_keys("status").count %></p>
        </div>
      </div>
    </div>
  </div>

  <div class="row">
    <div class="col-12">
      <div class="card">
        <div class="card-header">
          <h5>Recent Logs</h5>
        </div>
        <div class="card-body">
          <% if @logs.any? %>
            <div class="table-responsive">
              <table class="table table-striped">
                <thead>
                  <tr>
                    <th>Age</th>
                    <th>Model</th>
                    <th>Message</th>
                    <th>Log Chain</th>
                    <th>Level</th>
                    <th>Visibility</th>
                    <th>Status</th>
                    <th>Category</th>
                    <th>Data</th>
                  </tr>
                </thead>
                <tbody>
                  <% @logs.each do |log| %>
                    <tr>
                      <td>
                        <% days_old = ((Time.current - log.created_at) / 1.day).round(1) %>
                        <% if days_old < 1 %>
                          <span class="badge bg-success"><%= log.created_at.strftime("%H:%M:%S") %></span>
                          <br><small class="text-muted">Today</small>
                        <% elsif days_old < 7 %>
                          <span class="badge bg-info"><%= days_old.to_i %>d ago</span>
                          <br><small class="text-muted"><%= log.created_at.strftime("%m/%d %H:%M") %></small>
                        <% elsif days_old < 30 %>
                          <span class="badge bg-warning"><%= days_old.to_i %>d ago</span>
                          <br><small class="text-muted"><%= log.created_at.strftime("%m/%d") %></small>
                        <% else %>
                          <span class="badge bg-danger"><%= days_old.to_i %>d ago</span>
                          <br><small class="text-muted"><%= log.created_at.strftime("%m/%d/%y") %></small>
                        <% end %>
                      </td>
                      <td>
                        <span class="badge bg-secondary">
                          <%= log.loggable_type %>
                        </span>
                      </td>
                      <td><%= log.message %></td>
                      <td>
                        <% if log.metadata && log.metadata['log_chain'] %>
                          <% log_chain = log.metadata['log_chain'] %>
                          <span class="badge bg-info" title="<%= log_chain %>">
                            ...<%= log_chain.last(14) %>
                          </span>
                        <% end %>
                      </td>
                      <td>
                        <% log_level = log.metadata && log.metadata['log_level'] %>
                        <span class="badge bg-<%= log_level == 'error' ? 'danger' : 'info' %>">
                          <%= log_level || 'info' %>
                        </span>
                      </td>
                      <td>
                        <% visible_to = log.metadata && log.metadata['visible_to'] %>
                        <span class="badge bg-warning">
                          <%= visible_to || 'user' %>
                        </span>
                      </td>
                      <td>
                        <% status = log.metadata && log.metadata['status'] %>
                        <% if status %>
                          <span class="badge bg-success"><%= status %></span>
                        <% end %>
                      </td>
                      <td>
                        <% category = log.metadata && log.metadata['category'] %>
                        <% if category %>
                          <span class="badge bg-primary"><%= category %></span>
                        <% end %>
                      </td>
                      <td>
                        <% if log.metadata %>
                          <small class="text-muted">
                            <%= JSON.pretty_generate(log.metadata).truncate(1000) %>
                          </small>
                        <% end %>
                      </td>
                    </tr>
                  <% end %>
                </tbody>
              </table>
            </div>

            <!-- Pagination -->
            <% if @logs.respond_to?(:current_page) %>
              <div class="mt-4">
                <div class="d-flex justify-content-center">
                  <%= paginate @logs %>
                </div>
                <div class="pagination-info">
                  Page <%= @logs.current_page %> of <%= @logs.total_pages %>
                  (<%= @logs.count %> of <%= @logs.total_count %> logs)
                </div>
              </div>
            <% end %>
          <% else %>
            <p class="text-muted">No logs found. Click "Create Demo Data" to generate some sample logs.</p>
          <% end %>
        </div>
      </div>
    </div>
  </div>

  <div class="row mt-4">
    <div class="col-12">
      <div class="card">
        <div class="card-header">
          <h5>Code Examples</h5>
        </div>
        <div class="card-body">
          <h6>Enhance Chain Management:</h6>
          <pre><code># Start a session (generates new log_chain)
user.start_user_session({ ip_address: "192.168.1.1" })

# Subsequent activities use cached log_chain
user.log_session_activity("viewed_profile", { profile_id: 123 })
user.log_session_activity("updated_settings", { settings: ["theme"] })

# End session (uses cached log_chain)
user.end_user_session</code></pre>

          <h6>Batch Logging for Performance:</h6>
          <pre><code># Batch multiple log entries efficiently
user.log_user_workflow_steps([
  { message: "Step 1 completed", level: "info", status: "success" },
  { message: "Step 2 completed", level: "debug", status: "in_progress" },
  { message: "Process finished", level: "info", status: "completed" }
])</code></pre>

          <h6>Enhanced Query Methods:</h6>
          <pre><code># Query logs by various criteria
user.recent_errors                    # Recent error logs
user.logs_by_category("session")     # Logs by category
user.logs(log_chain: user.log_chain)     # Logs in specific chain
user.logs_in_range(1.hour.ago, Time.current)  # Time range queries</code></pre>

          <h6>Log Cleanup & Maintenance:</h6>
          <pre><code># Clean up old logs while keeping recent ones
user.cleanup_logs(older_than: 7.days, keep_recent: 10)

# Class-level queries
User.with_recent_logs(since: 1.hour.ago)  # Users with recent activity
User.with_logs_at_level("error")          # Users with error logs</code></pre>

          <h6>Multi-Job Workflow Logging:</h6>
          <pre><code># Generate unique workflow ID for cross-job logging
workflow_id = SecureRandom.uuid

# Log workflow start
user.log("Starting multi-job workflow",
         log_chain: workflow_id,
         category: "workflow_demo",
         data: { workflow_id: workflow_id, total_jobs: 3 })

# Queue jobs with same log_chain
OrderProcessingJob.perform_later(order.id, workflow_id)
EmailNotificationJob.perform_later(user.id, workflow_id, "order_confirmation")
InventoryManagementJob.perform_later(order.id, workflow_id, "reserve")

# Each job logs with the same log_chain for traceability
class OrderProcessingJob < ApplicationJob
  def perform(order_id, workflow_id)
    @order = Order.find(order_id)

    ActiveModelLogger::Log.create!(
      loggable: @order,
      message: "Starting order processing workflow",
      metadata: {
        log_chain: workflow_id,
        category: "order_processing",
        data: { order_id: @order.id, step: 1, total_steps: 4 }
      }
    )
    # ... processing steps with detailed logging ...
  end
end</code></pre>

          <h6>Mission Control Jobs Integration:</h6>
          <pre><code># Monitor jobs in real-time with Mission Control Jobs
# Access dashboard at /jobs (no authentication in development)

# Job monitoring provides:
# - Real-time job execution status
# - Queue management and performance metrics
# - Detailed job parameters and execution times
# - Error tracking and debugging information

# Perfect complement to ActiveModelLogger:
# - Mission Control: Job execution monitoring
# - ActiveModelLogger: Detailed workflow logging
# - Together: Complete end-to-end observability

# Example: Watch Multi-Job Workflow Demo execute
# 1. Click "Multi-Job Workflow Demo" button
# 2. Open "View Jobs Dashboard" in another tab
# 3. Watch jobs move from "queued" → "running" → "completed"
# 4. See detailed logs in ActiveModelLogger interface</code></pre>

          <h6>Block Logging with Automatic Start/End:</h6>
          <pre><code># Block logging with manual start/end messages
user.log_block do |logger|
  logger.log("Complex Data Processing started", log_level: "info")
  logger.log("Starting validation", log_level: "info")
  logger.log("Processing step 1", log_level: "debug",
             metadata: { step: 1, status: "in_progress" })
  logger.log("Processing step 2", log_level: "debug",
             metadata: { step: 2, status: "completed" })
  logger.log("Operation completed", log_level: "info",
             metadata: { total_steps: 2, duration: "0.5s" })
  logger.log("Complex Data Processing completed", log_level: "info")
end
# All logs within the block share the same log_chain for grouping</code></pre>

          <h6>Advanced Metadata Support:</h6>
          <pre><code># Rich structured data in logs
user.log("Complex operation completed",
         log_level: "info",
         metadata: {
           status: "success",
           category: "data_processing",
           data: {
             records_processed: 1000,
             processing_time: "2.5s",
             errors: 0,
             warnings: 2
           }
         })</code></pre>

          <h6>Enhanced with_keys Scope (v0.2.1):</h6>
          <pre><code># Find logs with keys anywhere in metadata (including nested)
ActiveModelLogger::Log.with_keys("email")        # Finds email at any nesting level
ActiveModelLogger::Log.with_keys("enabled")      # Finds enabled in deeply nested config
ActiveModelLogger::Log.with_keys("email", "sms") # Finds logs with both keys

# Examples of nested structures that would be found:
# {"settings": {"notifications": {"email": true, "sms": false}}}
# {"user": {"profile": {"contact": {"email": "user@example.com"}}}}
# {"config": {"cache": {"redis": {"enabled": true}}}}

# All of these would be found by with_keys("email") or with_keys("enabled")</code></pre>

          <h6>Complete Observability Solution:</h6>
          <pre><code># ActiveModelLogger + Mission Control Jobs = Complete Observability

# 1. Web Request Logging (ActiveModelLogger)
user.log("User initiated order workflow",
         log_chain: workflow_id,
         category: "user_action",
         data: { user_id: user.id, action: "create_order" })

# 2. Background Job Monitoring (Mission Control Jobs)
# - Watch jobs execute in real-time at /jobs
# - Monitor queue performance and job status
# - Track execution times and error rates

# 3. Cross-Job Logging (ActiveModelLogger)
# All jobs use the same log_chain for complete traceability:
OrderProcessingJob.perform_later(order.id, workflow_id)
EmailNotificationJob.perform_later(user.id, workflow_id, "confirmation")
InventoryManagementJob.perform_later(order.id, workflow_id, "reserve")

# 4. End-to-End Visibility
# - Web request → Background jobs → Database operations
# - Complete audit trail with shared log_chain
# - Real-time monitoring + detailed logging
# - Performance metrics + structured data

# Result: Complete visibility into complex workflows!</code></pre>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  .container { max-width: 1200px; margin: 0 auto; padding: 20px; }
  .card { margin-bottom: 20px; }
  .badge { font-size: 0.75em; }
  pre { background: #f8f9fa; padding: 10px; border-radius: 4px; }
  .table th { background-color: #f8f9fa; }
  .btn-purple { background-color: #6f42c1; border-color: #6f42c1; color: white; }
  .btn-purple:hover { background-color: #5a32a3; border-color: #5a32a3; color: white; }
</style>
